// ---------------------------------------------------------------------------------------------
// --------------- WARNING: this code is generated by an automatic code generator --------------
// ---------------------------------------------------------------------------------------------
// -------------- WARNING: any modifications made to this code will be overwritten -------------
// ---------------------------------------------------------------------------------------------

#include "../include/us_hydrodyn_pdb_tool_renum.h"

US_Hydrodyn_Pdb_Tool_Renum::US_Hydrodyn_Pdb_Tool_Renum(
                                                       void                     *              us_hydrodyn,
                                                       map < QString, QString > *              parameters,
                                                       QWidget *                               p,
                                                       const char *                            name
                                                       ) : QDialog( p, name )
{
   this->us_hydrodyn                          = us_hydrodyn;
   this->parameters                           = parameters;

   USglobal = new US_Config();
   setPalette( QPalette( USglobal->global_colors.cg_frame, USglobal->global_colors.cg_frame, USglobal->global_colors.cg_frame ) );
   setCaption( tr( "US-SOMO: PDB Editor: Renumber" ) );

   setupGUI();

   global_Xpos += 30;
   global_Ypos += 30;

   setGeometry( global_Xpos, global_Ypos, 0, 0 );
}

US_Hydrodyn_Pdb_Tool_Renum::~US_Hydrodyn_Pdb_Tool_Renum()
{
}

void US_Hydrodyn_Pdb_Tool_Renum::setupGUI()
{
   int minHeight1  = 30;

   lbl_title =  new QLabel      ( tr( "US-SOMO: PDB Editor: Renumber" ), this );
   lbl_title -> setFrameStyle   ( QFrame::WinPanel | QFrame::Raised );
   lbl_title -> setAlignment    ( Qt::AlignCenter | Qt::AlignVCenter );
   lbl_title -> setMinimumHeight( minHeight1 );
   lbl_title -> setPalette      ( QPalette( USglobal->global_colors.cg_frame, USglobal->global_colors.cg_frame, USglobal->global_colors.cg_frame ) );
   lbl_title -> setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize + 1, QFont::Bold ) );

   lbl_credits_1 =  new QLabel      ( "Cite: US-SOMO", this );
   lbl_credits_1 -> setAlignment    ( Qt::AlignCenter | Qt::AlignVCenter );
   lbl_credits_1 -> setMinimumHeight( minHeight1 );
   lbl_credits_1 -> setPalette      ( QPalette( USglobal->global_colors.cg_label, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   lbl_credits_1 -> setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize+1, QFont::Bold ) );

   lbl_inputfile = new QLabel      ( tr( "Input file" ), this );
   lbl_inputfile ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_inputfile ->setMinimumHeight( minHeight1 );
   lbl_inputfile ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_inputfile ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_inputfile ->setMinimumWidth ( QFontMetrics( lbl_inputfile->font() ).maxWidth() * 24 );

   le_inputfile = new QLineEdit     ( this, "inputfile Line Edit" );
   le_inputfile ->setText           ( parameters->count( "inputfile" ) ? ( *parameters )[ "inputfile" ] : "" );
   le_inputfile ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_inputfile ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_inputfile ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_inputfile ->setMinimumHeight  ( minHeight1 );
   le_inputfile ->setMinimumWidth   ( 150 );
   connect( le_inputfile, SIGNAL( textChanged( const QString & ) ), SLOT( update_inputfile( const QString & ) ) );

   lbl_usechainlist = new QLabel      ( tr( "Only apply to these chains\nleave blank for all chains\notherwise enter a list with no extra spaces" ), this );
   lbl_usechainlist ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_usechainlist ->setMinimumHeight( minHeight1 *  3 );
   lbl_usechainlist ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_usechainlist ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_usechainlist ->setMinimumWidth ( QFontMetrics( lbl_usechainlist->font() ).maxWidth() * 24 );

   le_usechainlist = new QLineEdit     ( this, "usechainlist Line Edit" );
   le_usechainlist ->setText           ( parameters->count( "usechainlist" ) ? ( *parameters )[ "usechainlist" ] : "" );
   le_usechainlist ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_usechainlist ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_usechainlist ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_usechainlist ->setMinimumHeight  ( minHeight1 *  3 );
   le_usechainlist ->setMinimumWidth   ( 150 );
   connect( le_usechainlist, SIGNAL( textChanged( const QString & ) ), SLOT( update_usechainlist( const QString & ) ) );

   lbl_reseqatom = new QLabel      ( tr( "Resequence ATOM/HETATM numbers {y|n}?" ), this );
   lbl_reseqatom ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_reseqatom ->setMinimumHeight( minHeight1 );
   lbl_reseqatom ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_reseqatom ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_reseqatom ->setMinimumWidth ( QFontMetrics( lbl_reseqatom->font() ).maxWidth() * 24 );

   le_reseqatom = new QLineEdit     ( this, "reseqatom Line Edit" );
   le_reseqatom ->setText           ( parameters->count( "reseqatom" ) ? ( *parameters )[ "reseqatom" ] : "" );
   le_reseqatom ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_reseqatom ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_reseqatom ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_reseqatom ->setMinimumHeight  ( minHeight1 );
   le_reseqatom ->setMinimumWidth   ( 150 );
   connect( le_reseqatom, SIGNAL( textChanged( const QString & ) ), SLOT( update_reseqatom( const QString & ) ) );

   lbl_startatom = new QLabel      ( tr( "Starting ATOM/HETATM number" ), this );
   lbl_startatom ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_startatom ->setMinimumHeight( minHeight1 );
   lbl_startatom ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_startatom ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_startatom ->setMinimumWidth ( QFontMetrics( lbl_startatom->font() ).maxWidth() * 24 );

   le_startatom = new QLineEdit     ( this, "startatom Line Edit" );
   le_startatom ->setText           ( parameters->count( "startatom" ) ? ( *parameters )[ "startatom" ] : "" );
   le_startatom ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_startatom ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_startatom ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_startatom ->setMinimumHeight  ( minHeight1 );
   le_startatom ->setMinimumWidth   ( 150 );
   connect( le_startatom, SIGNAL( textChanged( const QString & ) ), SLOT( update_startatom( const QString & ) ) );

   lbl_chainrestartatom = new QLabel      ( tr( "Restart ATOM/HETATM numbers of each chain {y|n}?" ), this );
   lbl_chainrestartatom ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_chainrestartatom ->setMinimumHeight( minHeight1 );
   lbl_chainrestartatom ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_chainrestartatom ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_chainrestartatom ->setMinimumWidth ( QFontMetrics( lbl_chainrestartatom->font() ).maxWidth() * 24 );

   le_chainrestartatom = new QLineEdit     ( this, "chainrestartatom Line Edit" );
   le_chainrestartatom ->setText           ( parameters->count( "chainrestartatom" ) ? ( *parameters )[ "chainrestartatom" ] : "" );
   le_chainrestartatom ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_chainrestartatom ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_chainrestartatom ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_chainrestartatom ->setMinimumHeight  ( minHeight1 );
   le_chainrestartatom ->setMinimumWidth   ( 150 );
   connect( le_chainrestartatom, SIGNAL( textChanged( const QString & ) ), SLOT( update_chainrestartatom( const QString & ) ) );

   lbl_modelrestartatom = new QLabel      ( tr( "Restart ATOM/HETATM numbers of each model {y|n}?" ), this );
   lbl_modelrestartatom ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_modelrestartatom ->setMinimumHeight( minHeight1 );
   lbl_modelrestartatom ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_modelrestartatom ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_modelrestartatom ->setMinimumWidth ( QFontMetrics( lbl_modelrestartatom->font() ).maxWidth() * 24 );

   le_modelrestartatom = new QLineEdit     ( this, "modelrestartatom Line Edit" );
   le_modelrestartatom ->setText           ( parameters->count( "modelrestartatom" ) ? ( *parameters )[ "modelrestartatom" ] : "" );
   le_modelrestartatom ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_modelrestartatom ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_modelrestartatom ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_modelrestartatom ->setMinimumHeight  ( minHeight1 );
   le_modelrestartatom ->setMinimumWidth   ( 150 );
   connect( le_modelrestartatom, SIGNAL( textChanged( const QString & ) ), SLOT( update_modelrestartatom( const QString & ) ) );

   lbl_reseqresidue = new QLabel      ( tr( "Resequence RESIDUE numbers {y|n}?" ), this );
   lbl_reseqresidue ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_reseqresidue ->setMinimumHeight( minHeight1 );
   lbl_reseqresidue ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_reseqresidue ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_reseqresidue ->setMinimumWidth ( QFontMetrics( lbl_reseqresidue->font() ).maxWidth() * 24 );

   le_reseqresidue = new QLineEdit     ( this, "reseqresidue Line Edit" );
   le_reseqresidue ->setText           ( parameters->count( "reseqresidue" ) ? ( *parameters )[ "reseqresidue" ] : "" );
   le_reseqresidue ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_reseqresidue ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_reseqresidue ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_reseqresidue ->setMinimumHeight  ( minHeight1 );
   le_reseqresidue ->setMinimumWidth   ( 150 );
   connect( le_reseqresidue, SIGNAL( textChanged( const QString & ) ), SLOT( update_reseqresidue( const QString & ) ) );

   lbl_startresidue = new QLabel      ( tr( "Starting RESIDUE number" ), this );
   lbl_startresidue ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_startresidue ->setMinimumHeight( minHeight1 );
   lbl_startresidue ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_startresidue ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_startresidue ->setMinimumWidth ( QFontMetrics( lbl_startresidue->font() ).maxWidth() * 24 );

   le_startresidue = new QLineEdit     ( this, "startresidue Line Edit" );
   le_startresidue ->setText           ( parameters->count( "startresidue" ) ? ( *parameters )[ "startresidue" ] : "" );
   le_startresidue ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_startresidue ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_startresidue ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_startresidue ->setMinimumHeight  ( minHeight1 );
   le_startresidue ->setMinimumWidth   ( 150 );
   connect( le_startresidue, SIGNAL( textChanged( const QString & ) ), SLOT( update_startresidue( const QString & ) ) );

   lbl_chainrestartresidue = new QLabel      ( tr( "Restart RESIDUE numbers of each chain {y|n}?" ), this );
   lbl_chainrestartresidue ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_chainrestartresidue ->setMinimumHeight( minHeight1 );
   lbl_chainrestartresidue ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_chainrestartresidue ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_chainrestartresidue ->setMinimumWidth ( QFontMetrics( lbl_chainrestartresidue->font() ).maxWidth() * 24 );

   le_chainrestartresidue = new QLineEdit     ( this, "chainrestartresidue Line Edit" );
   le_chainrestartresidue ->setText           ( parameters->count( "chainrestartresidue" ) ? ( *parameters )[ "chainrestartresidue" ] : "" );
   le_chainrestartresidue ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_chainrestartresidue ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_chainrestartresidue ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_chainrestartresidue ->setMinimumHeight  ( minHeight1 );
   le_chainrestartresidue ->setMinimumWidth   ( 150 );
   connect( le_chainrestartresidue, SIGNAL( textChanged( const QString & ) ), SLOT( update_chainrestartresidue( const QString & ) ) );

   lbl_modelrestartresidue = new QLabel      ( tr( "Restart RESIDUE numbers of each model {y|n}?" ), this );
   lbl_modelrestartresidue ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_modelrestartresidue ->setMinimumHeight( minHeight1 );
   lbl_modelrestartresidue ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_modelrestartresidue ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_modelrestartresidue ->setMinimumWidth ( QFontMetrics( lbl_modelrestartresidue->font() ).maxWidth() * 24 );

   le_modelrestartresidue = new QLineEdit     ( this, "modelrestartresidue Line Edit" );
   le_modelrestartresidue ->setText           ( parameters->count( "modelrestartresidue" ) ? ( *parameters )[ "modelrestartresidue" ] : "" );
   le_modelrestartresidue ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_modelrestartresidue ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_modelrestartresidue ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_modelrestartresidue ->setMinimumHeight  ( minHeight1 );
   le_modelrestartresidue ->setMinimumWidth   ( 150 );
   connect( le_modelrestartresidue, SIGNAL( textChanged( const QString & ) ), SLOT( update_modelrestartresidue( const QString & ) ) );

   lbl_striphydrogens = new QLabel      ( tr( "Remove Hydrogens {y|n}?" ), this );
   lbl_striphydrogens ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_striphydrogens ->setMinimumHeight( minHeight1 );
   lbl_striphydrogens ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_striphydrogens ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_striphydrogens ->setMinimumWidth ( QFontMetrics( lbl_striphydrogens->font() ).maxWidth() * 24 );

   le_striphydrogens = new QLineEdit     ( this, "striphydrogens Line Edit" );
   le_striphydrogens ->setText           ( parameters->count( "striphydrogens" ) ? ( *parameters )[ "striphydrogens" ] : "" );
   le_striphydrogens ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_striphydrogens ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_striphydrogens ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_striphydrogens ->setMinimumHeight  ( minHeight1 );
   le_striphydrogens ->setMinimumWidth   ( 150 );
   connect( le_striphydrogens, SIGNAL( textChanged( const QString & ) ), SLOT( update_striphydrogens( const QString & ) ) );

   lbl_itassertemplate = new QLabel      ( tr( "Make 3D format (I-TASSER) template {y|n}?" ), this );
   lbl_itassertemplate ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_itassertemplate ->setMinimumHeight( minHeight1 );
   lbl_itassertemplate ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_itassertemplate ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_itassertemplate ->setMinimumWidth ( QFontMetrics( lbl_itassertemplate->font() ).maxWidth() * 24 );

   le_itassertemplate = new QLineEdit     ( this, "itassertemplate Line Edit" );
   le_itassertemplate ->setText           ( parameters->count( "itassertemplate" ) ? ( *parameters )[ "itassertemplate" ] : "" );
   le_itassertemplate ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_itassertemplate ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_itassertemplate ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_itassertemplate ->setMinimumHeight  ( minHeight1 );
   le_itassertemplate ->setMinimumWidth   ( 150 );
   connect( le_itassertemplate, SIGNAL( textChanged( const QString & ) ), SLOT( update_itassertemplate( const QString & ) ) );

   pb_help =  new QPushButton ( tr( "Help" ), this );
   pb_help -> setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize + 1) );
   pb_help -> setMinimumHeight( minHeight1 );
   pb_help -> setPalette      ( QPalette( USglobal->global_colors.cg_pushb, USglobal->global_colors.cg_pushb_disabled, USglobal->global_colors.cg_pushb_active ) );
   connect( pb_help, SIGNAL( clicked() ), SLOT( help() ) );

   pb_close =  new QPushButton ( tr( "Close" ), this );
   pb_close -> setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize + 1) );
   pb_close -> setMinimumHeight( minHeight1 );
   pb_close -> setPalette      ( QPalette( USglobal->global_colors.cg_pushb, USglobal->global_colors.cg_pushb_disabled, USglobal->global_colors.cg_pushb_active ) );
   connect( pb_close, SIGNAL( clicked() ), SLOT( cancel() ) );

   QVBoxLayout *background = new QVBoxLayout( this );
   background->addSpacing(4);

   background->addWidget( lbl_title );
   background->addWidget( lbl_credits_1 );
   background->addSpacing( 4 );
   QHBoxLayout * hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_inputfile );
   hbl->addWidget( le_inputfile );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_usechainlist );
   hbl->addWidget( le_usechainlist );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_reseqatom );
   hbl->addWidget( le_reseqatom );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_startatom );
   hbl->addWidget( le_startatom );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_chainrestartatom );
   hbl->addWidget( le_chainrestartatom );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_modelrestartatom );
   hbl->addWidget( le_modelrestartatom );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_reseqresidue );
   hbl->addWidget( le_reseqresidue );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_startresidue );
   hbl->addWidget( le_startresidue );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_chainrestartresidue );
   hbl->addWidget( le_chainrestartresidue );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_modelrestartresidue );
   hbl->addWidget( le_modelrestartresidue );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_striphydrogens );
   hbl->addWidget( le_striphydrogens );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_itassertemplate );
   hbl->addWidget( le_itassertemplate );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );


   QHBoxLayout *hbl_bottom = new QHBoxLayout( 0 );
   hbl_bottom->addSpacing( 4 );
   hbl_bottom->addWidget ( pb_help );
   hbl_bottom->addSpacing( 4 );
   hbl_bottom->addWidget ( pb_close );
   hbl_bottom->addSpacing( 4 );

   background->addLayout ( hbl_bottom );
   background->addSpacing( 4 );
}

void US_Hydrodyn_Pdb_Tool_Renum::cancel()
{
   close();
}

void US_Hydrodyn_Pdb_Tool_Renum::help()
{
   US_Help *online_help;
   online_help = new US_Help( this );
   online_help->show_help("manual/pdb_tool_renum.html");
}

void US_Hydrodyn_Pdb_Tool_Renum::closeEvent( QCloseEvent *e )
{
   if ( parameters->count( "inputfile" ) &&
        (*parameters)[ "inputfile" ].isEmpty() )
   {
      parameters->erase( "inputfile" );
   }
   if ( parameters->count( "usechainlist" ) &&
        (*parameters)[ "usechainlist" ].isEmpty() )
   {
      parameters->erase( "usechainlist" );
   }
   if ( parameters->count( "reseqatom" ) &&
        (*parameters)[ "reseqatom" ].isEmpty() )
   {
      parameters->erase( "reseqatom" );
   }
   if ( parameters->count( "startatom" ) &&
        (*parameters)[ "startatom" ].isEmpty() )
   {
      parameters->erase( "startatom" );
   }
   if ( parameters->count( "chainrestartatom" ) &&
        (*parameters)[ "chainrestartatom" ].isEmpty() )
   {
      parameters->erase( "chainrestartatom" );
   }
   if ( parameters->count( "modelrestartatom" ) &&
        (*parameters)[ "modelrestartatom" ].isEmpty() )
   {
      parameters->erase( "modelrestartatom" );
   }
   if ( parameters->count( "reseqresidue" ) &&
        (*parameters)[ "reseqresidue" ].isEmpty() )
   {
      parameters->erase( "reseqresidue" );
   }
   if ( parameters->count( "startresidue" ) &&
        (*parameters)[ "startresidue" ].isEmpty() )
   {
      parameters->erase( "startresidue" );
   }
   if ( parameters->count( "chainrestartresidue" ) &&
        (*parameters)[ "chainrestartresidue" ].isEmpty() )
   {
      parameters->erase( "chainrestartresidue" );
   }
   if ( parameters->count( "modelrestartresidue" ) &&
        (*parameters)[ "modelrestartresidue" ].isEmpty() )
   {
      parameters->erase( "modelrestartresidue" );
   }
   if ( parameters->count( "striphydrogens" ) &&
        (*parameters)[ "striphydrogens" ].isEmpty() )
   {
      parameters->erase( "striphydrogens" );
   }
   if ( parameters->count( "itassertemplate" ) &&
        (*parameters)[ "itassertemplate" ].isEmpty() )
   {
      parameters->erase( "itassertemplate" );
   }

   global_Xpos -= 30;
   global_Ypos -= 30;
   e->accept();
}

void US_Hydrodyn_Pdb_Tool_Renum::update_inputfile( const QString & )
{
   QString filename = QFileDialog::getOpenFileName(
                                                   QString::null,
                                                   QString::null,
                                                   this,
                                                   "open file dialog",
                                                   tr( "Select a file for Input file" )
                                                   );

   disconnect( le_inputfile, SIGNAL( textChanged( const QString & ) ), 0, 0 );
   le_inputfile->setText( filename );
   connect( le_inputfile, SIGNAL( textChanged( const QString & ) ), SLOT( update_inputfile( const QString & ) ) );
   ( *parameters )[ "inputfile" ] = le_inputfile->text();
}

void US_Hydrodyn_Pdb_Tool_Renum::update_usechainlist( const QString & )
{
   ( *parameters )[ "usechainlist" ] = le_usechainlist->text();
}

void US_Hydrodyn_Pdb_Tool_Renum::update_reseqatom( const QString & )
{
   ( *parameters )[ "reseqatom" ] = le_reseqatom->text();
}

void US_Hydrodyn_Pdb_Tool_Renum::update_startatom( const QString & )
{
   ( *parameters )[ "startatom" ] = le_startatom->text();
}

void US_Hydrodyn_Pdb_Tool_Renum::update_chainrestartatom( const QString & )
{
   ( *parameters )[ "chainrestartatom" ] = le_chainrestartatom->text();
}

void US_Hydrodyn_Pdb_Tool_Renum::update_modelrestartatom( const QString & )
{
   ( *parameters )[ "modelrestartatom" ] = le_modelrestartatom->text();
}

void US_Hydrodyn_Pdb_Tool_Renum::update_reseqresidue( const QString & )
{
   ( *parameters )[ "reseqresidue" ] = le_reseqresidue->text();
}

void US_Hydrodyn_Pdb_Tool_Renum::update_startresidue( const QString & )
{
   ( *parameters )[ "startresidue" ] = le_startresidue->text();
}

void US_Hydrodyn_Pdb_Tool_Renum::update_chainrestartresidue( const QString & )
{
   ( *parameters )[ "chainrestartresidue" ] = le_chainrestartresidue->text();
}

void US_Hydrodyn_Pdb_Tool_Renum::update_modelrestartresidue( const QString & )
{
   ( *parameters )[ "modelrestartresidue" ] = le_modelrestartresidue->text();
}

void US_Hydrodyn_Pdb_Tool_Renum::update_striphydrogens( const QString & )
{
   ( *parameters )[ "striphydrogens" ] = le_striphydrogens->text();
}

void US_Hydrodyn_Pdb_Tool_Renum::update_itassertemplate( const QString & )
{
   ( *parameters )[ "itassertemplate" ] = le_itassertemplate->text();
}

