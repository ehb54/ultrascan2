// ---------------------------------------------------------------------------------------------
// --------------- WARNING: this code is generated by an automatic code generator --------------
// ---------------------------------------------------------------------------------------------
// -------------- WARNING: any modifications made to this code will be overwritten -------------
// ---------------------------------------------------------------------------------------------

#include "../include/us_hydrodyn_cluster_dammin.h"

US_Hydrodyn_Cluster_Dammin::US_Hydrodyn_Cluster_Dammin(
                                                       void                     *              us_hydrodyn,
                                                       map < QString, QString > *              parameters,
                                                       QWidget *                               p,
                                                       const char *                            name
                                                       ) : QDialog( p, name )

{
   this->us_hydrodyn                          = us_hydrodyn;
   this->parameters                           = parameters;

   USglobal = new US_Config();
   setPalette( QPalette( USglobal->global_colors.cg_frame, USglobal->global_colors.cg_frame, USglobal->global_colors.cg_frame ) );
   setCaption( tr( "US-SOMO: DAMMIN cluster interface" ) );

   setupGUI();

   global_Xpos += 30;
   global_Ypos += 30;

   setGeometry( global_Xpos, global_Ypos, 0, 0 );
}

US_Hydrodyn_Cluster_Dammin::~US_Hydrodyn_Cluster_Dammin()
{
}

void US_Hydrodyn_Cluster_Dammin::setupGUI()
{
   int minHeight1  = 30;

   lbl_title =  new QLabel      ( tr( "US-SOMO: DAMMIN cluster interface" ), this );
   lbl_title -> setFrameStyle   ( QFrame::WinPanel | QFrame::Raised );
   lbl_title -> setAlignment    ( Qt::AlignCenter | Qt::AlignVCenter );
   lbl_title -> setMinimumHeight( minHeight1 );
   lbl_title -> setPalette      ( QPalette( USglobal->global_colors.cg_frame, USglobal->global_colors.cg_frame, USglobal->global_colors.cg_frame ) );
   lbl_title -> setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize + 1, QFont::Bold ) );

   lbl_credits_1 =  new QLabel      ( "Svergun et al.", this );
   lbl_credits_1 -> setAlignment    ( Qt::AlignCenter | Qt::AlignVCenter );
   lbl_credits_1 -> setMinimumHeight( minHeight1 );
   lbl_credits_1 -> setPalette      ( QPalette( USglobal->global_colors.cg_label, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   lbl_credits_1 -> setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize+1, QFont::Bold ) );

   lbl_dammingnomfile = new QLabel      ( tr( "GNOM format .out file" ), this );
   lbl_dammingnomfile ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_dammingnomfile ->setMinimumHeight( minHeight1 );
   lbl_dammingnomfile ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_dammingnomfile ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_dammingnomfile ->setMinimumWidth ( 1300 );

   le_dammingnomfile = new QLineEdit     ( this, "dammingnomfile Line Edit" );
   if ( !parameters->count( "dammingnomfile" ) )
   {
      (*parameters)[ "dammingnomfile" ] = "";
   }
   le_dammingnomfile ->setText           ( ( *parameters )[ "dammingnomfile" ] );
   le_dammingnomfile ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_dammingnomfile ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_dammingnomfile ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_dammingnomfile ->setMinimumHeight  ( minHeight1 );
   le_dammingnomfile ->setMinimumWidth   ( 150 );
   connect( le_dammingnomfile, SIGNAL( textChanged( const QString & ) ), SLOT( update_dammingnomfile( const QString & ) ) );

   lbl_damminmode = new QLabel      ( tr( "DAMMIN mode [E]xpert, [S]low, [F]ast, [J]ag, [K]eep" ), this );
   lbl_damminmode ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_damminmode ->setMinimumHeight( minHeight1 );
   lbl_damminmode ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_damminmode ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_damminmode ->setMinimumWidth ( 1300 );

   le_damminmode = new QLineEdit     ( this, "damminmode Line Edit" );
   if ( !parameters->count( "damminmode" ) )
   {
      (*parameters)[ "damminmode" ] = "F";
   }
   le_damminmode ->setText           ( ( *parameters )[ "damminmode" ] );
   le_damminmode ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_damminmode ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_damminmode ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_damminmode ->setMinimumHeight  ( minHeight1 );
   le_damminmode ->setMinimumWidth   ( 150 );
   connect( le_damminmode, SIGNAL( textChanged( const QString & ) ), SLOT( update_damminmode( const QString & ) ) );

   lbl_dammindescription = new QLabel      ( tr( "Enter project description" ), this );
   lbl_dammindescription ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_dammindescription ->setMinimumHeight( minHeight1 );
   lbl_dammindescription ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_dammindescription ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_dammindescription ->setMinimumWidth ( 1300 );

   le_dammindescription = new QLineEdit     ( this, "dammindescription Line Edit" );
   if ( !parameters->count( "dammindescription" ) )
   {
      (*parameters)[ "dammindescription" ] = "";
   }
   le_dammindescription ->setText           ( ( *parameters )[ "dammindescription" ] );
   le_dammindescription ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_dammindescription ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_dammindescription ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_dammindescription ->setMinimumHeight  ( minHeight1 );
   le_dammindescription ->setMinimumWidth   ( 150 );
   connect( le_dammindescription, SIGNAL( textChanged( const QString & ) ), SLOT( update_dammindescription( const QString & ) ) );

   lbl_damminangularunits = new QLabel      ( tr( "Angular units in the input file:" ), this );
   lbl_damminangularunits ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_damminangularunits ->setMinimumHeight( minHeight1 );
   lbl_damminangularunits ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_damminangularunits ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_damminangularunits ->setMinimumWidth ( 1300 );

   le_damminangularunits = new QLineEdit     ( this, "damminangularunits Line Edit" );
   if ( !parameters->count( "damminangularunits" ) )
   {
      (*parameters)[ "damminangularunits" ] = "1";
   }
   le_damminangularunits ->setText           ( ( *parameters )[ "damminangularunits" ] );
   le_damminangularunits ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_damminangularunits ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_damminangularunits ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_damminangularunits ->setMinimumHeight  ( minHeight1 );
   le_damminangularunits ->setMinimumWidth   ( 150 );
   connect( le_damminangularunits, SIGNAL( textChanged( const QString & ) ), SLOT( update_damminangularunits( const QString & ) ) );

   lbl_damminfitcurvelimit = new QLabel      ( tr( "Portion of the curve to be fitted" ), this );
   lbl_damminfitcurvelimit ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_damminfitcurvelimit ->setMinimumHeight( minHeight1 );
   lbl_damminfitcurvelimit ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_damminfitcurvelimit ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_damminfitcurvelimit ->setMinimumWidth ( 1300 );

   le_damminfitcurvelimit = new QLineEdit     ( this, "damminfitcurvelimit Line Edit" );
   if ( !parameters->count( "damminfitcurvelimit" ) )
   {
      (*parameters)[ "damminfitcurvelimit" ] = "";
   }
   le_damminfitcurvelimit ->setText           ( ( *parameters )[ "damminfitcurvelimit" ] );
   le_damminfitcurvelimit ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_damminfitcurvelimit ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_damminfitcurvelimit ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_damminfitcurvelimit ->setMinimumHeight  ( minHeight1 );
   le_damminfitcurvelimit ->setMinimumWidth   ( 150 );
   connect( le_damminfitcurvelimit, SIGNAL( textChanged( const QString & ) ), SLOT( update_damminfitcurvelimit( const QString & ) ) );

   lbl_damminknotstofit = new QLabel      ( tr( "Number of knots in the curve to fit" ), this );
   lbl_damminknotstofit ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_damminknotstofit ->setMinimumHeight( minHeight1 );
   lbl_damminknotstofit ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_damminknotstofit ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_damminknotstofit ->setMinimumWidth ( 1300 );

   le_damminknotstofit = new QLineEdit     ( this, "damminknotstofit Line Edit" );
   if ( !parameters->count( "damminknotstofit" ) )
   {
      (*parameters)[ "damminknotstofit" ] = "";
   }
   le_damminknotstofit ->setText           ( ( *parameters )[ "damminknotstofit" ] );
   le_damminknotstofit ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_damminknotstofit ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_damminknotstofit ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_damminknotstofit ->setMinimumHeight  ( minHeight1 );
   le_damminknotstofit ->setMinimumWidth   ( 150 );
   connect( le_damminknotstofit, SIGNAL( textChanged( const QString & ) ), SLOT( update_damminknotstofit( const QString & ) ) );

   lbl_damminconstantsubtractionprocedure = new QLabel      ( tr( "Constant subtraction procedure" ), this );
   lbl_damminconstantsubtractionprocedure ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_damminconstantsubtractionprocedure ->setMinimumHeight( minHeight1 );
   lbl_damminconstantsubtractionprocedure ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_damminconstantsubtractionprocedure ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_damminconstantsubtractionprocedure ->setMinimumWidth ( 1300 );

   le_damminconstantsubtractionprocedure = new QLineEdit     ( this, "damminconstantsubtractionprocedure Line Edit" );
   if ( !parameters->count( "damminconstantsubtractionprocedure" ) )
   {
      (*parameters)[ "damminconstantsubtractionprocedure" ] = "";
   }
   le_damminconstantsubtractionprocedure ->setText           ( ( *parameters )[ "damminconstantsubtractionprocedure" ] );
   le_damminconstantsubtractionprocedure ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_damminconstantsubtractionprocedure ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_damminconstantsubtractionprocedure ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_damminconstantsubtractionprocedure ->setMinimumHeight  ( minHeight1 );
   le_damminconstantsubtractionprocedure ->setMinimumWidth   ( 150 );
   connect( le_damminconstantsubtractionprocedure, SIGNAL( textChanged( const QString & ) ), SLOT( update_damminconstantsubtractionprocedure( const QString & ) ) );

   lbl_damminmaxharmonics = new QLabel      ( tr( "Maximum order of harmonics" ), this );
   lbl_damminmaxharmonics ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_damminmaxharmonics ->setMinimumHeight( minHeight1 );
   lbl_damminmaxharmonics ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_damminmaxharmonics ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_damminmaxharmonics ->setMinimumWidth ( 1300 );

   le_damminmaxharmonics = new QLineEdit     ( this, "damminmaxharmonics Line Edit" );
   if ( !parameters->count( "damminmaxharmonics" ) )
   {
      (*parameters)[ "damminmaxharmonics" ] = "";
   }
   le_damminmaxharmonics ->setText           ( ( *parameters )[ "damminmaxharmonics" ] );
   le_damminmaxharmonics ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_damminmaxharmonics ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_damminmaxharmonics ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_damminmaxharmonics ->setMinimumHeight  ( minHeight1 );
   le_damminmaxharmonics ->setMinimumWidth   ( 150 );
   connect( le_damminmaxharmonics, SIGNAL( textChanged( const QString & ) ), SLOT( update_damminmaxharmonics( const QString & ) ) );

   lbl_dammininitialdamtype = new QLabel      ( tr( "Initial DAM: type [S]phere(default), [E]llisoid, [C]ylinder, [P]arallelepiped" ), this );
   lbl_dammininitialdamtype ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_dammininitialdamtype ->setMinimumHeight( minHeight1 );
   lbl_dammininitialdamtype ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_dammininitialdamtype ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_dammininitialdamtype ->setMinimumWidth ( 1300 );

   le_dammininitialdamtype = new QLineEdit     ( this, "dammininitialdamtype Line Edit" );
   if ( !parameters->count( "dammininitialdamtype" ) )
   {
      (*parameters)[ "dammininitialdamtype" ] = "S";
   }
   le_dammininitialdamtype ->setText           ( ( *parameters )[ "dammininitialdamtype" ] );
   le_dammininitialdamtype ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_dammininitialdamtype ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_dammininitialdamtype ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_dammininitialdamtype ->setMinimumHeight  ( minHeight1 );
   le_dammininitialdamtype ->setMinimumWidth   ( 150 );
   connect( le_dammininitialdamtype, SIGNAL( textChanged( const QString & ) ), SLOT( update_dammininitialdamtype( const QString & ) ) );

   lbl_damminsymmetry = new QLabel      ( tr( "Symmetry: P1...19, Pn2 (n=1...12), P23, P432 or PICO" ), this );
   lbl_damminsymmetry ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_damminsymmetry ->setMinimumHeight( minHeight1 );
   lbl_damminsymmetry ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_damminsymmetry ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_damminsymmetry ->setMinimumWidth ( 1300 );

   le_damminsymmetry = new QLineEdit     ( this, "damminsymmetry Line Edit" );
   if ( !parameters->count( "damminsymmetry" ) )
   {
      (*parameters)[ "damminsymmetry" ] = "P1";
   }
   le_damminsymmetry ->setText           ( ( *parameters )[ "damminsymmetry" ] );
   le_damminsymmetry ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_damminsymmetry ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_damminsymmetry ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_damminsymmetry ->setMinimumHeight  ( minHeight1 );
   le_damminsymmetry ->setMinimumWidth   ( 150 );
   connect( le_damminsymmetry, SIGNAL( textChanged( const QString & ) ), SLOT( update_damminsymmetry( const QString & ) ) );

   lbl_damminspherediameter = new QLabel      ( tr( "Sphere  diameter" ), this );
   lbl_damminspherediameter ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_damminspherediameter ->setMinimumHeight( minHeight1 );
   lbl_damminspherediameter ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_damminspherediameter ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_damminspherediameter ->setMinimumWidth ( 1300 );

   le_damminspherediameter = new QLineEdit     ( this, "damminspherediameter Line Edit" );
   if ( !parameters->count( "damminspherediameter" ) )
   {
      (*parameters)[ "damminspherediameter" ] = "";
   }
   le_damminspherediameter ->setText           ( ( *parameters )[ "damminspherediameter" ] );
   le_damminspherediameter ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_damminspherediameter ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_damminspherediameter ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_damminspherediameter ->setMinimumHeight  ( minHeight1 );
   le_damminspherediameter ->setMinimumWidth   ( 150 );
   connect( le_damminspherediameter, SIGNAL( textChanged( const QString & ) ), SLOT( update_damminspherediameter( const QString & ) ) );

   lbl_damminpackingradius = new QLabel      ( tr( "Packing radius of dummy atoms" ), this );
   lbl_damminpackingradius ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_damminpackingradius ->setMinimumHeight( minHeight1 );
   lbl_damminpackingradius ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_damminpackingradius ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_damminpackingradius ->setMinimumWidth ( 1300 );

   le_damminpackingradius = new QLineEdit     ( this, "damminpackingradius Line Edit" );
   if ( !parameters->count( "damminpackingradius" ) )
   {
      (*parameters)[ "damminpackingradius" ] = "";
   }
   le_damminpackingradius ->setText           ( ( *parameters )[ "damminpackingradius" ] );
   le_damminpackingradius ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_damminpackingradius ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_damminpackingradius ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_damminpackingradius ->setMinimumHeight  ( minHeight1 );
   le_damminpackingradius ->setMinimumWidth   ( 150 );
   connect( le_damminpackingradius, SIGNAL( textChanged( const QString & ) ), SLOT( update_damminpackingradius( const QString & ) ) );

   lbl_damminradius1stcoordinationsphere = new QLabel      ( tr( "Radius of 1st coordination sphere" ), this );
   lbl_damminradius1stcoordinationsphere ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_damminradius1stcoordinationsphere ->setMinimumHeight( minHeight1 );
   lbl_damminradius1stcoordinationsphere ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_damminradius1stcoordinationsphere ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_damminradius1stcoordinationsphere ->setMinimumWidth ( 1300 );

   le_damminradius1stcoordinationsphere = new QLineEdit     ( this, "damminradius1stcoordinationsphere Line Edit" );
   if ( !parameters->count( "damminradius1stcoordinationsphere" ) )
   {
      (*parameters)[ "damminradius1stcoordinationsphere" ] = "";
   }
   le_damminradius1stcoordinationsphere ->setText           ( ( *parameters )[ "damminradius1stcoordinationsphere" ] );
   le_damminradius1stcoordinationsphere ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_damminradius1stcoordinationsphere ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_damminradius1stcoordinationsphere ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_damminradius1stcoordinationsphere ->setMinimumHeight  ( minHeight1 );
   le_damminradius1stcoordinationsphere ->setMinimumWidth   ( 150 );
   connect( le_damminradius1stcoordinationsphere, SIGNAL( textChanged( const QString & ) ), SLOT( update_damminradius1stcoordinationsphere( const QString & ) ) );

   lbl_damminloosenesspenaltyweight = new QLabel      ( tr( "Looseness penalty weight" ), this );
   lbl_damminloosenesspenaltyweight ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_damminloosenesspenaltyweight ->setMinimumHeight( minHeight1 );
   lbl_damminloosenesspenaltyweight ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_damminloosenesspenaltyweight ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_damminloosenesspenaltyweight ->setMinimumWidth ( 1300 );

   le_damminloosenesspenaltyweight = new QLineEdit     ( this, "damminloosenesspenaltyweight Line Edit" );
   if ( !parameters->count( "damminloosenesspenaltyweight" ) )
   {
      (*parameters)[ "damminloosenesspenaltyweight" ] = "";
   }
   le_damminloosenesspenaltyweight ->setText           ( ( *parameters )[ "damminloosenesspenaltyweight" ] );
   le_damminloosenesspenaltyweight ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_damminloosenesspenaltyweight ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_damminloosenesspenaltyweight ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_damminloosenesspenaltyweight ->setMinimumHeight  ( minHeight1 );
   le_damminloosenesspenaltyweight ->setMinimumWidth   ( 150 );
   connect( le_damminloosenesspenaltyweight, SIGNAL( textChanged( const QString & ) ), SLOT( update_damminloosenesspenaltyweight( const QString & ) ) );

   lbl_dammindisconnectivitypenaltyweight = new QLabel      ( tr( "Disconnectivity penalty weight" ), this );
   lbl_dammindisconnectivitypenaltyweight ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_dammindisconnectivitypenaltyweight ->setMinimumHeight( minHeight1 );
   lbl_dammindisconnectivitypenaltyweight ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_dammindisconnectivitypenaltyweight ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_dammindisconnectivitypenaltyweight ->setMinimumWidth ( 1300 );

   le_dammindisconnectivitypenaltyweight = new QLineEdit     ( this, "dammindisconnectivitypenaltyweight Line Edit" );
   if ( !parameters->count( "dammindisconnectivitypenaltyweight" ) )
   {
      (*parameters)[ "dammindisconnectivitypenaltyweight" ] = "";
   }
   le_dammindisconnectivitypenaltyweight ->setText           ( ( *parameters )[ "dammindisconnectivitypenaltyweight" ] );
   le_dammindisconnectivitypenaltyweight ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_dammindisconnectivitypenaltyweight ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_dammindisconnectivitypenaltyweight ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_dammindisconnectivitypenaltyweight ->setMinimumHeight  ( minHeight1 );
   le_dammindisconnectivitypenaltyweight ->setMinimumWidth   ( 150 );
   connect( le_dammindisconnectivitypenaltyweight, SIGNAL( textChanged( const QString & ) ), SLOT( update_dammindisconnectivitypenaltyweight( const QString & ) ) );

   lbl_damminperipheralpenaltyweight = new QLabel      ( tr( "Peripheral penalty weight" ), this );
   lbl_damminperipheralpenaltyweight ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_damminperipheralpenaltyweight ->setMinimumHeight( minHeight1 );
   lbl_damminperipheralpenaltyweight ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_damminperipheralpenaltyweight ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_damminperipheralpenaltyweight ->setMinimumWidth ( 1300 );

   le_damminperipheralpenaltyweight = new QLineEdit     ( this, "damminperipheralpenaltyweight Line Edit" );
   if ( !parameters->count( "damminperipheralpenaltyweight" ) )
   {
      (*parameters)[ "damminperipheralpenaltyweight" ] = "";
   }
   le_damminperipheralpenaltyweight ->setText           ( ( *parameters )[ "damminperipheralpenaltyweight" ] );
   le_damminperipheralpenaltyweight ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_damminperipheralpenaltyweight ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_damminperipheralpenaltyweight ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_damminperipheralpenaltyweight ->setMinimumHeight  ( minHeight1 );
   le_damminperipheralpenaltyweight ->setMinimumWidth   ( 150 );
   connect( le_damminperipheralpenaltyweight, SIGNAL( textChanged( const QString & ) ), SLOT( update_damminperipheralpenaltyweight( const QString & ) ) );

   lbl_damminfixingthersholdsLosandRf = new QLabel      ( tr( "Fixing thresholds Los and Rf" ), this );
   lbl_damminfixingthersholdsLosandRf ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_damminfixingthersholdsLosandRf ->setMinimumHeight( minHeight1 );
   lbl_damminfixingthersholdsLosandRf ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_damminfixingthersholdsLosandRf ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_damminfixingthersholdsLosandRf ->setMinimumWidth ( 1300 );

   le_damminfixingthersholdsLosandRf = new QLineEdit     ( this, "damminfixingthersholdsLosandRf Line Edit" );
   if ( !parameters->count( "damminfixingthersholdsLosandRf" ) )
   {
      (*parameters)[ "damminfixingthersholdsLosandRf" ] = "";
   }
   le_damminfixingthersholdsLosandRf ->setText           ( ( *parameters )[ "damminfixingthersholdsLosandRf" ] );
   le_damminfixingthersholdsLosandRf ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_damminfixingthersholdsLosandRf ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_damminfixingthersholdsLosandRf ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_damminfixingthersholdsLosandRf ->setMinimumHeight  ( minHeight1 );
   le_damminfixingthersholdsLosandRf ->setMinimumWidth   ( 150 );
   connect( le_damminfixingthersholdsLosandRf, SIGNAL( textChanged( const QString & ) ), SLOT( update_damminfixingthersholdsLosandRf( const QString & ) ) );

   lbl_damminrandomizestructure = new QLabel      ( tr( "Randomize the structure" ), this );
   lbl_damminrandomizestructure ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_damminrandomizestructure ->setMinimumHeight( minHeight1 );
   lbl_damminrandomizestructure ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_damminrandomizestructure ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_damminrandomizestructure ->setMinimumWidth ( 1300 );

   le_damminrandomizestructure = new QLineEdit     ( this, "damminrandomizestructure Line Edit" );
   if ( !parameters->count( "damminrandomizestructure" ) )
   {
      (*parameters)[ "damminrandomizestructure" ] = "";
   }
   le_damminrandomizestructure ->setText           ( ( *parameters )[ "damminrandomizestructure" ] );
   le_damminrandomizestructure ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_damminrandomizestructure ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_damminrandomizestructure ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_damminrandomizestructure ->setMinimumHeight  ( minHeight1 );
   le_damminrandomizestructure ->setMinimumWidth   ( 150 );
   connect( le_damminrandomizestructure, SIGNAL( textChanged( const QString & ) ), SLOT( update_damminrandomizestructure( const QString & ) ) );

   lbl_damminweight = new QLabel      ( tr( "Weight" ), this );
   lbl_damminweight ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_damminweight ->setMinimumHeight( minHeight1 );
   lbl_damminweight ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_damminweight ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_damminweight ->setMinimumWidth ( 1300 );

   le_damminweight = new QLineEdit     ( this, "damminweight Line Edit" );
   if ( !parameters->count( "damminweight" ) )
   {
      (*parameters)[ "damminweight" ] = "";
   }
   le_damminweight ->setText           ( ( *parameters )[ "damminweight" ] );
   le_damminweight ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_damminweight ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_damminweight ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_damminweight ->setMinimumHeight  ( minHeight1 );
   le_damminweight ->setMinimumWidth   ( 150 );
   connect( le_damminweight, SIGNAL( textChanged( const QString & ) ), SLOT( update_damminweight( const QString & ) ) );

   lbl_dammininitialscalefactor = new QLabel      ( tr( "Initial scale factor" ), this );
   lbl_dammininitialscalefactor ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_dammininitialscalefactor ->setMinimumHeight( minHeight1 );
   lbl_dammininitialscalefactor ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_dammininitialscalefactor ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_dammininitialscalefactor ->setMinimumWidth ( 1300 );

   le_dammininitialscalefactor = new QLineEdit     ( this, "dammininitialscalefactor Line Edit" );
   if ( !parameters->count( "dammininitialscalefactor" ) )
   {
      (*parameters)[ "dammininitialscalefactor" ] = "";
   }
   le_dammininitialscalefactor ->setText           ( ( *parameters )[ "dammininitialscalefactor" ] );
   le_dammininitialscalefactor ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_dammininitialscalefactor ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_dammininitialscalefactor ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_dammininitialscalefactor ->setMinimumHeight  ( minHeight1 );
   le_dammininitialscalefactor ->setMinimumWidth   ( 150 );
   connect( le_dammininitialscalefactor, SIGNAL( textChanged( const QString & ) ), SLOT( update_dammininitialscalefactor( const QString & ) ) );

   lbl_damminfixscalefactor = new QLabel      ( tr( "Fix the scale factor" ), this );
   lbl_damminfixscalefactor ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_damminfixscalefactor ->setMinimumHeight( minHeight1 );
   lbl_damminfixscalefactor ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_damminfixscalefactor ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_damminfixscalefactor ->setMinimumWidth ( 1300 );

   le_damminfixscalefactor = new QLineEdit     ( this, "damminfixscalefactor Line Edit" );
   if ( !parameters->count( "damminfixscalefactor" ) )
   {
      (*parameters)[ "damminfixscalefactor" ] = "";
   }
   le_damminfixscalefactor ->setText           ( ( *parameters )[ "damminfixscalefactor" ] );
   le_damminfixscalefactor ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_damminfixscalefactor ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_damminfixscalefactor ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_damminfixscalefactor ->setMinimumHeight  ( minHeight1 );
   le_damminfixscalefactor ->setMinimumWidth   ( 150 );
   connect( le_damminfixscalefactor, SIGNAL( textChanged( const QString & ) ), SLOT( update_damminfixscalefactor( const QString & ) ) );

   lbl_dammininitialannealingtemperature = new QLabel      ( tr( "Initial annealing temperature" ), this );
   lbl_dammininitialannealingtemperature ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_dammininitialannealingtemperature ->setMinimumHeight( minHeight1 );
   lbl_dammininitialannealingtemperature ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_dammininitialannealingtemperature ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_dammininitialannealingtemperature ->setMinimumWidth ( 1300 );

   le_dammininitialannealingtemperature = new QLineEdit     ( this, "dammininitialannealingtemperature Line Edit" );
   if ( !parameters->count( "dammininitialannealingtemperature" ) )
   {
      (*parameters)[ "dammininitialannealingtemperature" ] = "";
   }
   le_dammininitialannealingtemperature ->setText           ( ( *parameters )[ "dammininitialannealingtemperature" ] );
   le_dammininitialannealingtemperature ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_dammininitialannealingtemperature ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_dammininitialannealingtemperature ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_dammininitialannealingtemperature ->setMinimumHeight  ( minHeight1 );
   le_dammininitialannealingtemperature ->setMinimumWidth   ( 150 );
   connect( le_dammininitialannealingtemperature, SIGNAL( textChanged( const QString & ) ), SLOT( update_dammininitialannealingtemperature( const QString & ) ) );

   lbl_damminannealingschedulefactor = new QLabel      ( tr( "Annealing schedule factor" ), this );
   lbl_damminannealingschedulefactor ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_damminannealingschedulefactor ->setMinimumHeight( minHeight1 );
   lbl_damminannealingschedulefactor ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_damminannealingschedulefactor ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_damminannealingschedulefactor ->setMinimumWidth ( 1300 );

   le_damminannealingschedulefactor = new QLineEdit     ( this, "damminannealingschedulefactor Line Edit" );
   if ( !parameters->count( "damminannealingschedulefactor" ) )
   {
      (*parameters)[ "damminannealingschedulefactor" ] = "";
   }
   le_damminannealingschedulefactor ->setText           ( ( *parameters )[ "damminannealingschedulefactor" ] );
   le_damminannealingschedulefactor ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_damminannealingschedulefactor ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_damminannealingschedulefactor ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_damminannealingschedulefactor ->setMinimumHeight  ( minHeight1 );
   le_damminannealingschedulefactor ->setMinimumWidth   ( 150 );
   connect( le_damminannealingschedulefactor, SIGNAL( textChanged( const QString & ) ), SLOT( update_damminannealingschedulefactor( const QString & ) ) );

   lbl_damminnumberofindependentatomstomodify = new QLabel      ( tr( "Min # of independent atoms to modify" ), this );
   lbl_damminnumberofindependentatomstomodify ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_damminnumberofindependentatomstomodify ->setMinimumHeight( minHeight1 );
   lbl_damminnumberofindependentatomstomodify ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_damminnumberofindependentatomstomodify ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_damminnumberofindependentatomstomodify ->setMinimumWidth ( 1300 );

   le_damminnumberofindependentatomstomodify = new QLineEdit     ( this, "damminnumberofindependentatomstomodify Line Edit" );
   if ( !parameters->count( "damminnumberofindependentatomstomodify" ) )
   {
      (*parameters)[ "damminnumberofindependentatomstomodify" ] = "";
   }
   le_damminnumberofindependentatomstomodify ->setText           ( ( *parameters )[ "damminnumberofindependentatomstomodify" ] );
   le_damminnumberofindependentatomstomodify ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_damminnumberofindependentatomstomodify ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_damminnumberofindependentatomstomodify ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_damminnumberofindependentatomstomodify ->setMinimumHeight  ( minHeight1 );
   le_damminnumberofindependentatomstomodify ->setMinimumWidth   ( 150 );
   connect( le_damminnumberofindependentatomstomodify, SIGNAL( textChanged( const QString & ) ), SLOT( update_damminnumberofindependentatomstomodify( const QString & ) ) );

   lbl_damminmaxnumberiterationseachT = new QLabel      ( tr( "Max # of iterations at each T" ), this );
   lbl_damminmaxnumberiterationseachT ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_damminmaxnumberiterationseachT ->setMinimumHeight( minHeight1 );
   lbl_damminmaxnumberiterationseachT ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_damminmaxnumberiterationseachT ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_damminmaxnumberiterationseachT ->setMinimumWidth ( 1300 );

   le_damminmaxnumberiterationseachT = new QLineEdit     ( this, "damminmaxnumberiterationseachT Line Edit" );
   if ( !parameters->count( "damminmaxnumberiterationseachT" ) )
   {
      (*parameters)[ "damminmaxnumberiterationseachT" ] = "";
   }
   le_damminmaxnumberiterationseachT ->setText           ( ( *parameters )[ "damminmaxnumberiterationseachT" ] );
   le_damminmaxnumberiterationseachT ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_damminmaxnumberiterationseachT ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_damminmaxnumberiterationseachT ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_damminmaxnumberiterationseachT ->setMinimumHeight  ( minHeight1 );
   le_damminmaxnumberiterationseachT ->setMinimumWidth   ( 150 );
   connect( le_damminmaxnumberiterationseachT, SIGNAL( textChanged( const QString & ) ), SLOT( update_damminmaxnumberiterationseachT( const QString & ) ) );

   lbl_damminmaxnumbersuccesseseachT = new QLabel      ( tr( "Max # of successes at each T" ), this );
   lbl_damminmaxnumbersuccesseseachT ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_damminmaxnumbersuccesseseachT ->setMinimumHeight( minHeight1 );
   lbl_damminmaxnumbersuccesseseachT ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_damminmaxnumbersuccesseseachT ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_damminmaxnumbersuccesseseachT ->setMinimumWidth ( 1300 );

   le_damminmaxnumbersuccesseseachT = new QLineEdit     ( this, "damminmaxnumbersuccesseseachT Line Edit" );
   if ( !parameters->count( "damminmaxnumbersuccesseseachT" ) )
   {
      (*parameters)[ "damminmaxnumbersuccesseseachT" ] = "";
   }
   le_damminmaxnumbersuccesseseachT ->setText           ( ( *parameters )[ "damminmaxnumbersuccesseseachT" ] );
   le_damminmaxnumbersuccesseseachT ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_damminmaxnumbersuccesseseachT ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_damminmaxnumbersuccesseseachT ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_damminmaxnumbersuccesseseachT ->setMinimumHeight  ( minHeight1 );
   le_damminmaxnumbersuccesseseachT ->setMinimumWidth   ( 150 );
   connect( le_damminmaxnumbersuccesseseachT, SIGNAL( textChanged( const QString & ) ), SLOT( update_damminmaxnumbersuccesseseachT( const QString & ) ) );

   lbl_damminminnumbersuccessestocontinue = new QLabel      ( tr( "Min # of successes to continue" ), this );
   lbl_damminminnumbersuccessestocontinue ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_damminminnumbersuccessestocontinue ->setMinimumHeight( minHeight1 );
   lbl_damminminnumbersuccessestocontinue ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_damminminnumbersuccessestocontinue ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_damminminnumbersuccessestocontinue ->setMinimumWidth ( 1300 );

   le_damminminnumbersuccessestocontinue = new QLineEdit     ( this, "damminminnumbersuccessestocontinue Line Edit" );
   if ( !parameters->count( "damminminnumbersuccessestocontinue" ) )
   {
      (*parameters)[ "damminminnumbersuccessestocontinue" ] = "";
   }
   le_damminminnumbersuccessestocontinue ->setText           ( ( *parameters )[ "damminminnumbersuccessestocontinue" ] );
   le_damminminnumbersuccessestocontinue ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_damminminnumbersuccessestocontinue ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_damminminnumbersuccessestocontinue ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_damminminnumbersuccessestocontinue ->setMinimumHeight  ( minHeight1 );
   le_damminminnumbersuccessestocontinue ->setMinimumWidth   ( 150 );
   connect( le_damminminnumbersuccessestocontinue, SIGNAL( textChanged( const QString & ) ), SLOT( update_damminminnumbersuccessestocontinue( const QString & ) ) );

   lbl_damminmaxnumberannealingsteps = new QLabel      ( tr( "Max # of annealing steps" ), this );
   lbl_damminmaxnumberannealingsteps ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_damminmaxnumberannealingsteps ->setMinimumHeight( minHeight1 );
   lbl_damminmaxnumberannealingsteps ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_damminmaxnumberannealingsteps ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_damminmaxnumberannealingsteps ->setMinimumWidth ( 1300 );

   le_damminmaxnumberannealingsteps = new QLineEdit     ( this, "damminmaxnumberannealingsteps Line Edit" );
   if ( !parameters->count( "damminmaxnumberannealingsteps" ) )
   {
      (*parameters)[ "damminmaxnumberannealingsteps" ] = "";
   }
   le_damminmaxnumberannealingsteps ->setText           ( ( *parameters )[ "damminmaxnumberannealingsteps" ] );
   le_damminmaxnumberannealingsteps ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_damminmaxnumberannealingsteps ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_damminmaxnumberannealingsteps ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_damminmaxnumberannealingsteps ->setMinimumHeight  ( minHeight1 );
   le_damminmaxnumberannealingsteps ->setMinimumWidth   ( 150 );
   connect( le_damminmaxnumberannealingsteps, SIGNAL( textChanged( const QString & ) ), SLOT( update_damminmaxnumberannealingsteps( const QString & ) ) );

   lbl_damminexpectedshape = new QLabel      ( tr( "Expected particle shape: [P]rolate, [O]blate, [S]phere, [U]nknown" ), this );
   lbl_damminexpectedshape ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_damminexpectedshape ->setMinimumHeight( minHeight1 );
   lbl_damminexpectedshape ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_damminexpectedshape ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_damminexpectedshape ->setMinimumWidth ( 1300 );

   le_damminexpectedshape = new QLineEdit     ( this, "damminexpectedshape Line Edit" );
   if ( !parameters->count( "damminexpectedshape" ) )
   {
      (*parameters)[ "damminexpectedshape" ] = "U";
   }
   le_damminexpectedshape ->setText           ( ( *parameters )[ "damminexpectedshape" ] );
   le_damminexpectedshape ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_damminexpectedshape ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_damminexpectedshape ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_damminexpectedshape ->setMinimumHeight  ( minHeight1 );
   le_damminexpectedshape ->setMinimumWidth   ( 150 );
   connect( le_damminexpectedshape, SIGNAL( textChanged( const QString & ) ), SLOT( update_damminexpectedshape( const QString & ) ) );

   pb_save =  new QPushButton ( tr( "Save" ), this );
   pb_save -> setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize + 1) );
   pb_save -> setMinimumHeight( minHeight1 );
   pb_save -> setPalette      ( QPalette( USglobal->global_colors.cg_pushb, USglobal->global_colors.cg_pushb_disabled, USglobal->global_colors.cg_pushb_active ) );
   connect( pb_save, SIGNAL( clicked() ), SLOT( save() ) );

   pb_load =  new QPushButton ( tr( "Load" ), this );
   pb_load -> setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize + 1) );
   pb_load -> setMinimumHeight( minHeight1 );
   pb_load -> setPalette      ( QPalette( USglobal->global_colors.cg_pushb, USglobal->global_colors.cg_pushb_disabled, USglobal->global_colors.cg_pushb_active ) );
   connect( pb_load, SIGNAL( clicked() ), SLOT( load() ) );

   pb_help =  new QPushButton ( tr( "Help" ), this );
   pb_help -> setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize + 1) );
   pb_help -> setMinimumHeight( minHeight1 );
   pb_help -> setPalette      ( QPalette( USglobal->global_colors.cg_pushb, USglobal->global_colors.cg_pushb_disabled, USglobal->global_colors.cg_pushb_active ) );
   connect( pb_help, SIGNAL( clicked() ), SLOT( help() ) );

   pb_close =  new QPushButton ( tr( "Close" ), this );
   pb_close -> setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize + 1) );
   pb_close -> setMinimumHeight( minHeight1 );
   pb_close -> setPalette      ( QPalette( USglobal->global_colors.cg_pushb, USglobal->global_colors.cg_pushb_disabled, USglobal->global_colors.cg_pushb_active ) );
   connect( pb_close, SIGNAL( clicked() ), SLOT( cancel() ) );

   QVBoxLayout *background = new QVBoxLayout( this );
   background->addSpacing(4);

   background->addWidget( lbl_title );
   background->addWidget( lbl_credits_1 );
   background->addSpacing( 4 );
   QHBoxLayout * hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_dammingnomfile );
   hbl->addWidget( le_dammingnomfile );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_damminmode );
   hbl->addWidget( le_damminmode );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_dammindescription );
   hbl->addWidget( le_dammindescription );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_damminangularunits );
   hbl->addWidget( le_damminangularunits );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_damminfitcurvelimit );
   hbl->addWidget( le_damminfitcurvelimit );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_damminknotstofit );
   hbl->addWidget( le_damminknotstofit );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_damminconstantsubtractionprocedure );
   hbl->addWidget( le_damminconstantsubtractionprocedure );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_damminmaxharmonics );
   hbl->addWidget( le_damminmaxharmonics );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_dammininitialdamtype );
   hbl->addWidget( le_dammininitialdamtype );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_damminsymmetry );
   hbl->addWidget( le_damminsymmetry );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_damminspherediameter );
   hbl->addWidget( le_damminspherediameter );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_damminpackingradius );
   hbl->addWidget( le_damminpackingradius );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_damminradius1stcoordinationsphere );
   hbl->addWidget( le_damminradius1stcoordinationsphere );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_damminloosenesspenaltyweight );
   hbl->addWidget( le_damminloosenesspenaltyweight );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_dammindisconnectivitypenaltyweight );
   hbl->addWidget( le_dammindisconnectivitypenaltyweight );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_damminperipheralpenaltyweight );
   hbl->addWidget( le_damminperipheralpenaltyweight );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_damminfixingthersholdsLosandRf );
   hbl->addWidget( le_damminfixingthersholdsLosandRf );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_damminrandomizestructure );
   hbl->addWidget( le_damminrandomizestructure );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_damminweight );
   hbl->addWidget( le_damminweight );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_dammininitialscalefactor );
   hbl->addWidget( le_dammininitialscalefactor );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_damminfixscalefactor );
   hbl->addWidget( le_damminfixscalefactor );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_dammininitialannealingtemperature );
   hbl->addWidget( le_dammininitialannealingtemperature );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_damminannealingschedulefactor );
   hbl->addWidget( le_damminannealingschedulefactor );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_damminnumberofindependentatomstomodify );
   hbl->addWidget( le_damminnumberofindependentatomstomodify );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_damminmaxnumberiterationseachT );
   hbl->addWidget( le_damminmaxnumberiterationseachT );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_damminmaxnumbersuccesseseachT );
   hbl->addWidget( le_damminmaxnumbersuccesseseachT );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_damminminnumbersuccessestocontinue );
   hbl->addWidget( le_damminminnumbersuccessestocontinue );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_damminmaxnumberannealingsteps );
   hbl->addWidget( le_damminmaxnumberannealingsteps );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_damminexpectedshape );
   hbl->addWidget( le_damminexpectedshape );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( pb_save );
   hbl->addWidget( pb_load );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );


   QHBoxLayout *hbl_bottom = new QHBoxLayout( 0 );
   hbl_bottom->addSpacing( 4 );
   hbl_bottom->addWidget ( pb_help );
   hbl_bottom->addSpacing( 4 );
   hbl_bottom->addWidget ( pb_close );
   hbl_bottom->addSpacing( 4 );

   background->addLayout ( hbl_bottom );
   background->addSpacing( 4 );
}

void US_Hydrodyn_Cluster_Dammin::cancel()
{
   close();
}

void US_Hydrodyn_Cluster_Dammin::help()
{
   US_Help *online_help;
   online_help = new US_Help( this );
   online_help->show_help("manual/dammin.html");
}

void US_Hydrodyn_Cluster_Dammin::closeEvent( QCloseEvent *e )
{

   global_Xpos -= 30;
   global_Ypos -= 30;
   e->accept();
}

void US_Hydrodyn_Cluster_Dammin::update_dammingnomfile( const QString & )
{
   QString filename = QFileDialog::getOpenFileName(
                                                   QString::null,
                                                   QString::null,
                                                   this,
                                                   "open file dialog",
                                                   tr( "Select a file for GNOM format .out file" )
                                                   );

   disconnect( le_dammingnomfile, SIGNAL( textChanged( const QString & ) ), 0, 0 );
   le_dammingnomfile->setText( filename );
   connect( le_dammingnomfile, SIGNAL( textChanged( const QString & ) ), SLOT( update_dammingnomfile( const QString & ) ) );
   ( *parameters )[ "dammingnomfile" ] = le_dammingnomfile->text();
}

void US_Hydrodyn_Cluster_Dammin::update_damminmode( const QString & )
{
   ( *parameters )[ "damminmode" ] = le_damminmode->text();
}

void US_Hydrodyn_Cluster_Dammin::update_dammindescription( const QString & )
{
   ( *parameters )[ "dammindescription" ] = le_dammindescription->text();
}

void US_Hydrodyn_Cluster_Dammin::update_damminangularunits( const QString & )
{
   ( *parameters )[ "damminangularunits" ] = le_damminangularunits->text();
}

void US_Hydrodyn_Cluster_Dammin::update_damminfitcurvelimit( const QString & )
{
   ( *parameters )[ "damminfitcurvelimit" ] = le_damminfitcurvelimit->text();
}

void US_Hydrodyn_Cluster_Dammin::update_damminknotstofit( const QString & )
{
   ( *parameters )[ "damminknotstofit" ] = le_damminknotstofit->text();
}

void US_Hydrodyn_Cluster_Dammin::update_damminconstantsubtractionprocedure( const QString & )
{
   ( *parameters )[ "damminconstantsubtractionprocedure" ] = le_damminconstantsubtractionprocedure->text();
}

void US_Hydrodyn_Cluster_Dammin::update_damminmaxharmonics( const QString & )
{
   ( *parameters )[ "damminmaxharmonics" ] = le_damminmaxharmonics->text();
}

void US_Hydrodyn_Cluster_Dammin::update_dammininitialdamtype( const QString & )
{
   ( *parameters )[ "dammininitialdamtype" ] = le_dammininitialdamtype->text();
}

void US_Hydrodyn_Cluster_Dammin::update_damminsymmetry( const QString & )
{
   ( *parameters )[ "damminsymmetry" ] = le_damminsymmetry->text();
}

void US_Hydrodyn_Cluster_Dammin::update_damminspherediameter( const QString & )
{
   ( *parameters )[ "damminspherediameter" ] = le_damminspherediameter->text();
}

void US_Hydrodyn_Cluster_Dammin::update_damminpackingradius( const QString & )
{
   ( *parameters )[ "damminpackingradius" ] = le_damminpackingradius->text();
}

void US_Hydrodyn_Cluster_Dammin::update_damminradius1stcoordinationsphere( const QString & )
{
   ( *parameters )[ "damminradius1stcoordinationsphere" ] = le_damminradius1stcoordinationsphere->text();
}

void US_Hydrodyn_Cluster_Dammin::update_damminloosenesspenaltyweight( const QString & )
{
   ( *parameters )[ "damminloosenesspenaltyweight" ] = le_damminloosenesspenaltyweight->text();
}

void US_Hydrodyn_Cluster_Dammin::update_dammindisconnectivitypenaltyweight( const QString & )
{
   ( *parameters )[ "dammindisconnectivitypenaltyweight" ] = le_dammindisconnectivitypenaltyweight->text();
}

void US_Hydrodyn_Cluster_Dammin::update_damminperipheralpenaltyweight( const QString & )
{
   ( *parameters )[ "damminperipheralpenaltyweight" ] = le_damminperipheralpenaltyweight->text();
}

void US_Hydrodyn_Cluster_Dammin::update_damminfixingthersholdsLosandRf( const QString & )
{
   ( *parameters )[ "damminfixingthersholdsLosandRf" ] = le_damminfixingthersholdsLosandRf->text();
}

void US_Hydrodyn_Cluster_Dammin::update_damminrandomizestructure( const QString & )
{
   ( *parameters )[ "damminrandomizestructure" ] = le_damminrandomizestructure->text();
}

void US_Hydrodyn_Cluster_Dammin::update_damminweight( const QString & )
{
   ( *parameters )[ "damminweight" ] = le_damminweight->text();
}

void US_Hydrodyn_Cluster_Dammin::update_dammininitialscalefactor( const QString & )
{
   ( *parameters )[ "dammininitialscalefactor" ] = le_dammininitialscalefactor->text();
}

void US_Hydrodyn_Cluster_Dammin::update_damminfixscalefactor( const QString & )
{
   ( *parameters )[ "damminfixscalefactor" ] = le_damminfixscalefactor->text();
}

void US_Hydrodyn_Cluster_Dammin::update_dammininitialannealingtemperature( const QString & )
{
   ( *parameters )[ "dammininitialannealingtemperature" ] = le_dammininitialannealingtemperature->text();
}

void US_Hydrodyn_Cluster_Dammin::update_damminannealingschedulefactor( const QString & )
{
   ( *parameters )[ "damminannealingschedulefactor" ] = le_damminannealingschedulefactor->text();
}

void US_Hydrodyn_Cluster_Dammin::update_damminnumberofindependentatomstomodify( const QString & )
{
   ( *parameters )[ "damminnumberofindependentatomstomodify" ] = le_damminnumberofindependentatomstomodify->text();
}

void US_Hydrodyn_Cluster_Dammin::update_damminmaxnumberiterationseachT( const QString & )
{
   ( *parameters )[ "damminmaxnumberiterationseachT" ] = le_damminmaxnumberiterationseachT->text();
}

void US_Hydrodyn_Cluster_Dammin::update_damminmaxnumbersuccesseseachT( const QString & )
{
   ( *parameters )[ "damminmaxnumbersuccesseseachT" ] = le_damminmaxnumbersuccesseseachT->text();
}

void US_Hydrodyn_Cluster_Dammin::update_damminminnumbersuccessestocontinue( const QString & )
{
   ( *parameters )[ "damminminnumbersuccessestocontinue" ] = le_damminminnumbersuccessestocontinue->text();
}

void US_Hydrodyn_Cluster_Dammin::update_damminmaxnumberannealingsteps( const QString & )
{
   ( *parameters )[ "damminmaxnumberannealingsteps" ] = le_damminmaxnumberannealingsteps->text();
}

void US_Hydrodyn_Cluster_Dammin::update_damminexpectedshape( const QString & )
{
   ( *parameters )[ "damminexpectedshape" ] = le_damminexpectedshape->text();
}

void US_Hydrodyn_Cluster_Dammin::save()
{
   QString fn = QFileDialog::getSaveFileName( 
                                              QString::null, 
                                              "*.cluster_dammin",
                                              this,
                                              tr( QString( "%1: Save" ).arg( "US-SOMO: DAMMIN cluster interface" ) ),
                                              tr( "Save the parameters" ) 
                                              );

   if( !fn.isEmpty() )
   {
      if ( !fn.contains( QRegExp( "\\.cluster_dammin$" ) ) )
      {
         fn += ".cluster_dammin";
      }
      QFile f( fn );
      if ( !f.open( IO_WriteOnly ) )
      {
         QMessageBox::information( this,
                                   tr( QString( "%1: Save" ).arg( "US-SOMO: DAMMIN cluster interface" ) ),
                                   QString( tr( "Could not open file %1 for writing" ) )
                                   .arg( fn ) 
                                   );
         return;
      }
      QTextStream ts( &f );
      ts << US_Json::compose( *parameters );
      f.close();
   }
}

void US_Hydrodyn_Cluster_Dammin::load()
{
   QString fn = QFileDialog::getOpenFileName( 
                                              QString::null, 
                                              "*.cluster_dammin",
                                              this,
                                              tr( QString( "%1: Open" ).arg( "US-SOMO: DAMMIN cluster interface" ) ),
                                              tr( "Load parameters" ) 
                                              );
   if( !fn.isEmpty() )
   {
      QFile f( fn );
      if ( !f.open( IO_ReadOnly ) )
      {
          QMessageBox::information( 
                                    this,
                                    tr( QString( "%1: Open" ).arg( "US-SOMO: DAMMIN cluster interface" ) ),
                                    QString( tr( "Could not open file %1 for reading" ) )
                                    .arg( fn ) 
                                    );
          return;
      }
      QString qs;
      QTextStream ts( &f );
      while ( !ts.atEnd() )
      {
          qs += ts.readLine();
      }
      f.close();
      *parameters = US_Json::split( qs );
      update_fields();
   }
}

void US_Hydrodyn_Cluster_Dammin::update_fields()
{
   disconnect( le_dammingnomfile, SIGNAL( textChanged( const QString & ) ), 0, 0 );
   le_dammingnomfile                               ->setText( parameters->count( "dammingnomfile" ) ? ( *parameters )[ "dammingnomfile" ] : "" );
   connect( le_dammingnomfile, SIGNAL( textChanged( const QString & ) ), SLOT( update_dammingnomfile( const QString & ) ) );
   le_damminmode                                   ->setText( parameters->count( "damminmode" ) ? ( *parameters )[ "damminmode" ] : "" );
   le_dammindescription                            ->setText( parameters->count( "dammindescription" ) ? ( *parameters )[ "dammindescription" ] : "" );
   le_damminangularunits                           ->setText( parameters->count( "damminangularunits" ) ? ( *parameters )[ "damminangularunits" ] : "" );
   le_damminfitcurvelimit                          ->setText( parameters->count( "damminfitcurvelimit" ) ? ( *parameters )[ "damminfitcurvelimit" ] : "" );
   le_damminknotstofit                             ->setText( parameters->count( "damminknotstofit" ) ? ( *parameters )[ "damminknotstofit" ] : "" );
   le_damminconstantsubtractionprocedure           ->setText( parameters->count( "damminconstantsubtractionprocedure" ) ? ( *parameters )[ "damminconstantsubtractionprocedure" ] : "" );
   le_damminmaxharmonics                           ->setText( parameters->count( "damminmaxharmonics" ) ? ( *parameters )[ "damminmaxharmonics" ] : "" );
   le_dammininitialdamtype                         ->setText( parameters->count( "dammininitialdamtype" ) ? ( *parameters )[ "dammininitialdamtype" ] : "" );
   le_damminsymmetry                               ->setText( parameters->count( "damminsymmetry" ) ? ( *parameters )[ "damminsymmetry" ] : "" );
   le_damminspherediameter                         ->setText( parameters->count( "damminspherediameter" ) ? ( *parameters )[ "damminspherediameter" ] : "" );
   le_damminpackingradius                          ->setText( parameters->count( "damminpackingradius" ) ? ( *parameters )[ "damminpackingradius" ] : "" );
   le_damminradius1stcoordinationsphere            ->setText( parameters->count( "damminradius1stcoordinationsphere" ) ? ( *parameters )[ "damminradius1stcoordinationsphere" ] : "" );
   le_damminloosenesspenaltyweight                 ->setText( parameters->count( "damminloosenesspenaltyweight" ) ? ( *parameters )[ "damminloosenesspenaltyweight" ] : "" );
   le_dammindisconnectivitypenaltyweight           ->setText( parameters->count( "dammindisconnectivitypenaltyweight" ) ? ( *parameters )[ "dammindisconnectivitypenaltyweight" ] : "" );
   le_damminperipheralpenaltyweight                ->setText( parameters->count( "damminperipheralpenaltyweight" ) ? ( *parameters )[ "damminperipheralpenaltyweight" ] : "" );
   le_damminfixingthersholdsLosandRf               ->setText( parameters->count( "damminfixingthersholdsLosandRf" ) ? ( *parameters )[ "damminfixingthersholdsLosandRf" ] : "" );
   le_damminrandomizestructure                     ->setText( parameters->count( "damminrandomizestructure" ) ? ( *parameters )[ "damminrandomizestructure" ] : "" );
   le_damminweight                                 ->setText( parameters->count( "damminweight" ) ? ( *parameters )[ "damminweight" ] : "" );
   le_dammininitialscalefactor                     ->setText( parameters->count( "dammininitialscalefactor" ) ? ( *parameters )[ "dammininitialscalefactor" ] : "" );
   le_damminfixscalefactor                         ->setText( parameters->count( "damminfixscalefactor" ) ? ( *parameters )[ "damminfixscalefactor" ] : "" );
   le_dammininitialannealingtemperature            ->setText( parameters->count( "dammininitialannealingtemperature" ) ? ( *parameters )[ "dammininitialannealingtemperature" ] : "" );
   le_damminannealingschedulefactor                ->setText( parameters->count( "damminannealingschedulefactor" ) ? ( *parameters )[ "damminannealingschedulefactor" ] : "" );
   le_damminnumberofindependentatomstomodify       ->setText( parameters->count( "damminnumberofindependentatomstomodify" ) ? ( *parameters )[ "damminnumberofindependentatomstomodify" ] : "" );
   le_damminmaxnumberiterationseachT               ->setText( parameters->count( "damminmaxnumberiterationseachT" ) ? ( *parameters )[ "damminmaxnumberiterationseachT" ] : "" );
   le_damminmaxnumbersuccesseseachT                ->setText( parameters->count( "damminmaxnumbersuccesseseachT" ) ? ( *parameters )[ "damminmaxnumbersuccesseseachT" ] : "" );
   le_damminminnumbersuccessestocontinue           ->setText( parameters->count( "damminminnumbersuccessestocontinue" ) ? ( *parameters )[ "damminminnumbersuccessestocontinue" ] : "" );
   le_damminmaxnumberannealingsteps                ->setText( parameters->count( "damminmaxnumberannealingsteps" ) ? ( *parameters )[ "damminmaxnumberannealingsteps" ] : "" );
   le_damminexpectedshape                          ->setText( parameters->count( "damminexpectedshape" ) ? ( *parameters )[ "damminexpectedshape" ] : "" );
}

